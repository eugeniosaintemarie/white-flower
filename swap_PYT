from reportlab.lib.pagesizes import A4
from reportlab.pdfgen import canvas

# Mapeo de los campos: Especifica qué índice corresponde a cada campo
mapeo_campos = {
    'CUIL': 0,            # Primer valor antes del primer punto y coma
    'Nombre': 1,          # Segundo valor entre el primer y segundo punto y coma
    'Apellido': 2,        # Tercer valor, y así sucesivamente
    'Direccion': 0,       # En la segunda línea
    'Ciudad': 1,
    'Email': 0,           # En la tercera línea
    'Telefono': 1
}

# Función para leer el archivo TXT y mapear los campos dinámicamente
def leer_informacion_clientes(archivo_txt, mapeo_campos):
    clientes = []
    with open(archivo_txt, 'r') as file:
        lines = file.readlines()
        for i in range(0, len(lines), 3):
            cliente = {}
            datos_linea_1 = lines[i].strip().split(';')
            datos_linea_2 = lines[i+1].strip().split(';')
            datos_linea_3 = lines[i+2].strip().split(';')
            
            # Asignar campos basados en el mapeo
            cliente['CUIL'] = datos_linea_1[mapeo_campos['CUIL']]
            cliente['Nombre'] = datos_linea_1[mapeo_campos['Nombre']]
            cliente['Apellido'] = datos_linea_1[mapeo_campos['Apellido']]
            cliente['Direccion'] = datos_linea_2[mapeo_campos['Direccion']]
            cliente['Ciudad'] = datos_linea_2[mapeo_campos['Ciudad']]
            cliente['Email'] = datos_linea_3[mapeo_campos['Email']]
            cliente['Telefono'] = datos_linea_3[mapeo_campos['Telefono']]
            
            clientes.append(cliente)
    return clientes

# Función para generar un PDF con la información de un cliente
def generar_pdf(cliente, numero_cliente):
    nombre_pdf = f"cliente_{numero_cliente}.pdf"
    c = canvas.Canvas(nombre_pdf, pagesize=A4)
    
    # Escribir la información en el PDF
    c.drawString(100, 800, f"Cliente {numero_cliente}")
    c.drawString(100, 780, f"CUIL: {cliente['CUIL']}")
    c.drawString(100, 760, f"Nombre: {cliente['Nombre']}")
    c.drawString(100, 740, f"Apellido: {cliente['Apellido']}")
    c.drawString(100, 720, f"Dirección: {cliente['Direccion']}")
    c.drawString(100, 700, f"Ciudad: {cliente['Ciudad']}")
    c.drawString(100, 680, f"Email: {cliente['Email']}")
    c.drawString(100, 660, f"Teléfono: {cliente['Telefono']}")
    
    # Guardar el PDF
    c.save()

# Función principal para procesar todos los clientes y generar sus PDFs
def procesar_y_generar_pdfs(archivo_txt, mapeo_campos):
    clientes = leer_informacion_clientes(archivo_txt, mapeo_campos)
    
    for i, cliente in enumerate(clientes):
        generar_pdf(cliente, i + 1)

# Ejecutar el proceso con tu archivo TXT
archivo_txt = 'clientes.txt'
procesar_y_generar_pdfs(archivo_txt, mapeo_campos)

from pdfgen import canvas
from reportlab.lib.pagesizes import A4
from reportlab.pdfgen.canvas import Canvas
from reportlab.lib.units import inch

# Función para superponer la cuadrícula sobre un PDF existente
def superponer_grilla_sobre_pdf(pdf_existente, pdf_salida):
    # Abrir el PDF existente
    pdf_reader = PyPDF2.PdfReader(open(pdf_existente, "rb"))
    num_pages = len(pdf_reader.pages)
    
    # Crear un PDF de salida
    output_canvas = canvas.Canvas(pdf_salida, pagesize=A4)
    width, height = A4

    # Iterar sobre cada página del PDF existente
    for page_num in range(num_pages):
        # Extraer la página
        output_canvas.showPage()  # Crear una nueva página en el PDF de salida

        # Superponer el contenido de la página del PDF existente
        packet = output_canvas._code
        packet.drawImage(pdf_existente, 0, 0, width, height)

        # Dibujar la cuadrícula
        step = 20  # Ajustar el tamaño del paso (distancia entre líneas)
        
        # Coordenadas X
        for x in range(0, int(width), step):
            output_canvas.drawString(x, height - 10, str(x))
            output_canvas.line(x, 0, x, height)
        
        # Coordenadas Y
        for y in range(0, int(height), step):
            output_canvas.drawString(5, y, str(y))
            output_canvas.line(0, y, width, y)

    # Guardar el nuevo PDF con la cuadrícula superpuesta
    output_canvas.save()

# Ejecutar la función con tu PDF modelo y el nuevo PDF de salida
pdf_existente = 'tu_pdf_modelo.pdf'  # El PDF sobre el que quieres superponer la cuadrícula
pdf_salida = 'pdf_con_grilla.pdf'    # El nuevo PDF con la cuadrícula

superponer_grilla_sobre_pdf(pdf_existente, pdf_salida)
