def agregar_texto_con_saltos_por_caracteres(can, texto, x, y, max_caracteres_por_linea):
    # Divide el texto en líneas de máximo 'max_caracteres_por_linea' caracteres
    for i in range(0, len(texto), max_caracteres_por_linea):
        # Corta el texto en pedazos de 'max_caracteres_por_linea'
        linea = texto[i:i+max_caracteres_por_linea]
        can.drawString(x, y, linea)
        y -= 15  # Mueve la posición de Y hacia abajo para la siguiente línea


def agregar_texto_y_codigo_a_pdf(pdf_modelo, cliente, pdf_final):
    reader = PdfReader(pdf_modelo)
    writer = PdfWriter()

    packet = io.BytesIO()
    can = canvas.Canvas(packet, pagesize=letter)

    # Texto largo de la variable observaciones
    observaciones = cliente["observaciones"]  # Asumiendo que "observaciones" viene del cliente

    # Ajustar el tamaño de la fuente para el texto largo
    can.setFont("Helvetica", 12)

    # Dibuja el texto con saltos de línea automáticos cada 60 caracteres
    agregar_texto_con_saltos_por_caracteres(can, observaciones, 100, 750, max_caracteres_por_linea=60)

    # Generar el código de barras
    numero_barras = cliente["numero_pago"]
    barHeight = 20 * 2.83465  # 20 mm en puntos
    barWidth = 0.8 * 2.83465  # 0.8 mm en puntos
    barcode_obj = code128.Code128(numero_barras, barHeight=barHeight, barWidth=barWidth)
    barcode_obj.drawOn(can, 100, 700)

    can.save()

    packet.seek(0)
    new_pdf = PdfReader(packet)

    page = reader.pages[0]
    page.merge_page(new_pdf.pages[0])
    writer.add_page(page)

    with open(pdf_final, "wb") as output_file:
        writer.write(output_file)
